#!/bin/bash

# –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å–æ —Å–∫—Ä–∏–ø—Ç–æ–º
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
TEMPLATE_DIR="$SCRIPT_DIR"
COMPOSE_DIR="$SCRIPT_DIR/../compose"

# –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é ENV_SUBST –∏–ª–∏ —Å–∏—Å—Ç–µ–º–Ω—ã–π envsubst
if [ -z "$ENV_SUBST" ]; then
  if ! command -v envsubst &> /dev/null; then
    echo "‚ùå –û—à–∏–±–∫–∞: envsubst –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ –∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω —á–µ—Ä–µ–∑ ENV_SUBST!"
    echo "–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç —á–µ—Ä–µ–∑ task env:generate"
    exit 1
  fi
  ENV_SUBST=envsubst
fi

# –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ .env —Ñ–∞–π–ª–∞
load_env_file() {
  local env_file="$1"

  if [ ! -f "$env_file" ]; then
    echo "‚ùå –û—à–∏–±–∫–∞: –§–∞–π–ª $env_file –Ω–µ –Ω–∞–π–¥–µ–Ω!"
  exit 1
fi

  echo "üìã –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ $env_file"
set -a
  source "$env_file"
set +a
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —à–∞–±–ª–æ–Ω–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏—è .env —Ñ–∞–π–ª–∞
process_template() {
  local service=$1
  local template="$TEMPLATE_DIR/${service}.env.template"
  local output="$COMPOSE_DIR/${service}/.env"

  echo "–û–±—Ä–∞–±–æ—Ç–∫–∞ —à–∞–±–ª–æ–Ω–∞ –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞ $service..."

  if [ ! -f "$template" ]; then
    echo "‚ö†Ô∏è –®–∞–±–ª–æ–Ω $template –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º..."
    return 0
  fi

  # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –µ—â–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
  mkdir -p "$(dirname "$output")"

  # –ò—Å–ø–æ–ª—å–∑—É–µ–º envsubst –¥–ª—è –∑–∞–º–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤ —à–∞–±–ª–æ–Ω–µ
  $ENV_SUBST < "$template" > "$output"

  echo "‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª $output"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª—é–±–æ–≥–æ —à–∞–±–ª–æ–Ω–∞ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –ø—É—Ç–∏ –≤—ã–≤–æ–¥–∞
process_custom_template() {
  local template="$1"
  local output="$2"

  if [ ! -f "$template" ]; then
    echo "‚ö†Ô∏è –®–∞–±–ª–æ–Ω $template –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º..."
    return 1
  fi

  echo "üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —à–∞–±–ª–æ–Ω–∞: $template"

  # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –µ—â–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
  mkdir -p "$(dirname "$output")"

  # –ò—Å–ø–æ–ª—å–∑—É–µ–º envsubst –¥–ª—è –∑–∞–º–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤ —à–∞–±–ª–æ–Ω–µ
  $ENV_SUBST < "$template" > "$output"

  echo "‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: $output"
  return 0
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤ (–æ—Å–Ω–æ–≤–Ω–æ–π —Ä–µ–∂–∏–º)
process_services() {
  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ ENV_FILE
  if [ -z "$ENV_FILE" ]; then
    echo "‚ùå –û—à–∏–±–∫–∞: –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è ENV_FILE –Ω–µ –∑–∞–¥–∞–Ω–∞!"
    exit 1
  fi

  load_env_file "$ENV_FILE"

  # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–∏—Å–æ–≤ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
  if [ -z "$SERVICES" ]; then
    echo "‚ö†Ô∏è –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è SERVICES –Ω–µ –∑–∞–¥–∞–Ω–∞. –ù–µ—Ç —Å–µ—Ä–≤–∏—Å–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏."
    exit 0
  fi

  # –†–∞–∑–¥–µ–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–∏—Å–æ–≤ –ø–æ –∑–∞–ø—è—Ç–æ–π
  IFS=',' read -ra services <<< "$SERVICES"
  echo "üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã: ${services[*]}"

  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —à–∞–±–ª–æ–Ω—ã –¥–ª—è –≤—Å–µ—Ö —É–∫–∞–∑–∞–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
  success_count=0
  skip_count=0
  for service in "${services[@]}"; do
    process_template "$service"
    if [ -f "$TEMPLATE_DIR/${service}.env.template" ]; then
      ((success_count++))
    else
      ((skip_count++))
    fi
  done

  if [ $success_count -eq 0 ]; then
    echo "‚ö†Ô∏è –ù–∏ –æ–¥–∏–Ω .env —Ñ–∞–π–ª –Ω–µ —Å–æ–∑–¥–∞–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–∏—Å–æ–≤ –∏ –Ω–∞–ª–∏—á–∏–µ —à–∞–±–ª–æ–Ω–æ–≤."
  else
    echo "üéâ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: $success_count —Ñ–∞–π–ª–æ–≤ —Å–æ–∑–¥–∞–Ω–æ, $skip_count —à–∞–±–ª–æ–Ω–æ–≤ –ø—Ä–æ–ø—É—â–µ–Ω–æ"
  fi
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
process_monitoring() {
  echo "üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞..."

  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ ENV_FILE
  if [ -z "$ENV_FILE" ]; then
    echo "‚ùå –û—à–∏–±–∫–∞: –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è ENV_FILE –Ω–µ –∑–∞–¥–∞–Ω–∞!"
    exit 1
  fi

  load_env_file "$ENV_FILE"

  # –°–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "—à–∞–±–ª–æ–Ω:–≤—ã–≤–æ–¥"
  local templates=(
    "$COMPOSE_DIR/core/otel/otel-collector-config.template.yaml:$COMPOSE_DIR/core/otel/otel-collector-config.yaml"
    "$COMPOSE_DIR/core/prometheus/prometheus.template.yml:$COMPOSE_DIR/core/prometheus/prometheus.yml"
    "$COMPOSE_DIR/core/grafana/provisioning/datasources/prometheus.template.yml:$COMPOSE_DIR/core/grafana/provisioning/datasources/prometheus.yml"
  )

  success_count=0
  for template_pair in "${templates[@]}"; do
    IFS=':' read -r template output <<< "$template_pair"
    if process_custom_template "$template" "$output"; then
      ((success_count++))
    fi
  done

  echo "üéâ –û–±—Ä–∞–±–æ—Ç–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: $success_count —Ñ–∞–π–ª–æ–≤ —Å–æ–∑–¥–∞–Ω–æ"
}

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã —Å–∫—Ä–∏–ø—Ç–∞
MODE="${1:-services}"

case "$MODE" in
  services)
    process_services
    ;;
  monitoring)
    process_monitoring
    ;;
  *)
    echo "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: $MODE"
    echo "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∂–∏–º—ã: services, monitoring"
    exit 1
    ;;
esac
