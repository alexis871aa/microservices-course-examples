# Секция receivers (приемники) описывает, откуда OpenTelemetry Collector получает данные телеметрии
receivers:
  # OTLP (OpenTelemetry Protocol) - стандартный протокол для передачи телеметрии
  # Используется для приема данных от инструментированных приложений
  otlp:
    protocols:
      # gRPC протокол - бинарный протокол на основе HTTP/2, обеспечивает высокую производительность
      grpc:
        # Адрес, на котором коллектор слушает gRPC соединения
        # 0.0.0.0 означает "все сетевые интерфейсы"
        endpoint: 0.0.0.0:4317
        # Максимальный размер сообщения для приема
        max_recv_msg_size_mib: 64
        # Таймаут ожидания соединения
        read_buffer_size: 512_000
      # HTTP/JSON протокол - более простой в отладке, но менее производительный вариант
      http:
        # Адрес, на котором коллектор слушает HTTP соединения
        endpoint: 0.0.0.0:4318
        # Включение CORS для веб-клиентов
        cors:
          allowed_origins: ["*"]
          allowed_headers: ["*"]

# Секция processors (обработчики) описывает, как обрабатывать полученные данные
# перед отправкой их в экспортеры
processors:
  # Батчинг - группировка данных в пакеты для эффективной передачи
  batch:
    # Максимальный размер пакета (количество элементов)
    send_batch_size: 1000
    # Максимальное время ожидания перед отправкой неполного пакета
    timeout: 10s
    # Максимальное кол-во отправляемых элементов за один раз
    send_batch_max_size: 1000
  
  # Ограничитель памяти - защищает от утечек памяти и перегрузки
  memory_limiter:
    # Как часто проверять использование памяти
    check_interval: 1s
    # Максимальный процент использования памяти (от системной)
    limit_percentage: 75
    # Максимальный процент внезапного скачка использования памяти
    spike_limit_percentage: 15
  
  # Определение ресурсов - добавляет метаданные о системе, на которой работает коллектор
  resourcedetection:
    # Типы детекторов: env - из переменных окружения, system - из системной информации
    detectors: [env, system]
    # Таймаут операции обнаружения ресурсов
    timeout: 5s
  
  # Вероятностное семплирование - этот процессор управляет объемом собираемых данных
  # Применяется только к трейсам в соответствующем пайплайне
  probabilistic_sampler:
    # Процент трейсов, которые будут сохранены
    # 100% означает сохранение всех данных (хорошо для разработки)
    # В продакшене рекомендуется более низкий процент (1-10%) для снижения нагрузки
    sampling_percentage: 100

# Секция exporters (экспортеры) описывает, куда отправлять обработанные данные телеметрии
exporters:
  # Экспорт трейсов в Jaeger
  otlp/jaeger:
    endpoint: jaeger:4317 # Эндпоинт Jaeger, принимающий OTLP формат
    # Коллектор отправляет данные в Jaeger по gRPC
    # Jaeger слушает на порту 4317 для приема данных от коллектора
    tls:
      insecure: true # Отключение TLS для локальной разработки
  
  # Экспорт данных в логи - полезно для отладки
  debug:
    # Уровень детализации логов
    verbosity: detailed

# Секция extensions (расширения) описывает дополнительные возможности коллектора
extensions:
  # Проверка здоровья - эндпоинт для мониторинга состояния коллектора
  health_check:
    # Адрес, на котором доступен эндпоинт проверки здоровья
    endpoint: 0.0.0.0:13133
    # Настройки проверки для определения состояния
    path: /health
    check_collector_pipeline: 
      enabled: true
  
  # Профилировщик Go - для анализа производительности коллектора
  pprof:
    # Адрес для доступа к профилировщику
    endpoint: 0.0.0.0:1888
  
  # zPages - встроенные страницы диагностики для отладки и мониторинга
  zpages:
    # Адрес для доступа к диагностическим страницам
    endpoint: 0.0.0.0:55679

# Секция service описывает, как компоненты (receivers, processors, exporters, extensions)
# соединяются вместе в рабочие пайплайны
service:
  # Активация расширений
  extensions: [health_check, pprof, zpages]
  
  # Настройки телеметрии для самого коллектора
  telemetry:
    logs:
      level: "info"
    metrics:
      address: 0.0.0.0:8888
  
  # Определение пайплайнов для разных типов телеметрии
  pipelines:
    # Пайплайн для трейсов
    traces:
      # Используемые приемники данных
      receivers: [otlp]
      # Последовательность обработчиков для трансформации данных
      processors: [memory_limiter, probabilistic_sampler, batch, resourcedetection]
      # Куда отправлять обработанные трейсы
      exporters: [otlp/jaeger, debug]
