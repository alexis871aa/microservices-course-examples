package main

import (
	"context"
	"encoding/json"
	"errors"
	"fmt"
	"log"
	"net"
	"net/http"
	"os"
	"os/signal"
	"syscall"
	"time"

	"github.com/go-chi/chi/v5"
	"github.com/go-chi/chi/v5/middleware"
	"github.com/go-chi/render"

	"github.com/alexis871aa/microservices-course-examples/week_1/http_chi/pkg/models"
)

const (
	httpPort     = "8080"
	urlParamCity = "city"
	// –¢–∞–π–º–∞—É—Ç—ã –¥–ª—è HTTP-—Å–µ—Ä–≤–µ—Ä–∞
	readHeaderTimeout = 5 * time.Second
	shutdownTimeout   = 10 * time.Second
)

func main() {
	// –°–æ–∑–¥–∞–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ
	storage := models.NewWeatherStorage()

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä Chi
	r := chi.NewRouter()

	// –î–æ–±–∞–≤–ª—è–µ–º middleware
	r.Use(middleware.Logger)                             // middleware, –∫–æ—Ç–æ—Ä–∞—è –ª–æ–≥–≥–∏—Ä—É–µ—Ç —Å—Ç–∞—Ä—Ç –∏ –∫–æ–Ω–µ—Ü –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞, –ø–æ–ª–µ–∑–Ω–∞, –∫–æ–≥–¥–∞ —Ö–æ—Ç–∏–º –ª–æ–≥–≥–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∂–¥—ã–π –≤—ã–∑–æ–≤
	r.Use(middleware.Recoverer)                          // middleware, –ø—Ä–∏ –≤—ã–∑–æ–≤–µ –Ω–∞—à–∏—Ö —Ä—É—á–µ–∫ ,–ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –ø–∞–Ω–∏–∫—É, —Ç–æ –µ—Å—Ç—å –ø–æ —Å—É—Ç–∏ —Å–ø–∞—Å–∞–µ—Ç –æ—Ç –∫—Ä–∏—Ç –æ—à–∏–±–æ–∫
	r.Use(middleware.Timeout(10 * time.Second))          // middleware, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∑–≤–æ–ª—è–µ—Ç –∑–∞–¥–∞—Ç—å —Ç–∞–π–º–∞—É—Ç, —Ç–æ –µ—Å—Ç—å –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è, –æ–±—Ä—É–±–∞–µ—Ç –æ—Ç–≤–µ—Ç, –µ—Å–ª–∏ —Ä—É—á–∫–∞ –Ω–µ —Å–º–æ–≥–ª–∞ —Å–ø—Ä–∞–≤–∏—Ç—Å—è —Å –∑–∞–ø—Ä–æ—Å–æ–º, —á–µ—Ä–µ–∑ –∑–∞–¥–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Ä–µ–º–µ–Ω–∏
	r.Use(render.SetContentType(render.ContentTypeJSON)) // middleware, –ø–æ–∑–≤–æ–ª—è–µ—Ç –∑–∞–¥–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤ http

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∞—Ä—à—Ä—É—Ç—ã, —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç—ã, —Ç–æ –µ—Å—Ç—å –ø–æ —Å—É—Ç–∏ —Ç–µ —Å–∞–º—ã–µ —Ä—É—á–∫–∏
	r.Route("/api/v1/weather", func(r chi.Router) { // –±–∞–∑–æ–≤—ã–π url
		r.Get("/{city}", getWeatherHandler(storage))    // —Ä—É—á–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç–æ–¥ get, –≤ path –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö {city}
		r.Put("/{city}", updateWeatherHandler(storage)) // —Ä—É—á–∫–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–µ—Ç–æ–¥ put, –≤ path –ø–∞—Ä–∞–º—Ç–µ—Ä–∞—Ö —Ç–∞–∫–∂–µ –æ–∂–∏–¥–∞–µ–º {city}
	})

	// –ó–∞–ø—É—Å–∫–∞–µ–º HTTP-—Å–µ—Ä–≤–µ—Ä
	server := &http.Server{
		Addr:              net.JoinHostPort("localhost", httpPort),
		Handler:           r,                 // –ø–æ–¥—Å–æ–≤—ã–≤–∞–µ–º –Ω–∞—à–µ–º—É —Å–µ—Ä–≤–µ—Ä—É –≥–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ r, –∫–æ—Ç–æ—Ä—ã–π –º—ã –¥–æ —ç—Ç–æ–≥–æ —Å–∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞–ª–∏
		ReadHeaderTimeout: readHeaderTimeout, // –ó–∞—â–∏—Ç–∞ –æ—Ç Slowloris –∞—Ç–∞–∫ - —Ç–∏–ø DDoS-–∞—Ç–∞–∫–∏, –ø—Ä–∏ –∫–æ—Ç–æ—Ä–æ–π
		// –∞—Ç–∞–∫—É—é—â–∏–π —É–º—ã—à–ª–µ–Ω–Ω–æ –º–µ–¥–ª–µ–Ω–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç HTTP-–∑–∞–≥–æ–ª–æ–≤–∫–∏, —É–¥–µ—Ä–∂–∏–≤–∞—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –æ—Ç–∫—Ä—ã—Ç—ã–º–∏ –∏ –∏—Å—Ç–æ—â–∞—è
		// –ø—É–ª –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ. ReadHeaderTimeout –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ,
		// –µ—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –Ω–µ —É—Å–ø–µ–ª –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞ –æ—Ç–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è.
	}

	// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –≥–æ—Ä—É—Ç–∏–Ω–µ, —Ç–∞–∫ –∫–∞–∫ server.ListenAndServe() —ç—Ç–æ –±–ª–æ–∫–∏—Ä—É—é—â–∏–π –≤—ã–∑–æ–≤
	go func() {
		log.Printf("üöÄ HTTP-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É %s\n", httpPort)
		err := server.ListenAndServe()
		if err != nil && !errors.Is(err, http.ErrServerClosed) {
			log.Printf("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: %v\n", err)
		}
	}()

	// Graceful shutdown, —ç—Ç–æ –∫–æ–Ω—Ü–µ–ø—Ü–∏—è –∞–∫–∫–∫—É—Ä–∞—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã –∏ —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∞ –∫–∞–∫–∏–µ-—Ç–æ –¥–µ–π—Å—Ç–≤–∏—è –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
	quit := make(chan os.Signal, 1) // —Å–æ–∑–¥–∞—ë–º –∫–∞–Ω–∞–ª —Ç–∏–ø–∞ os.Signal
	// –Ω–∞–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã –Ω–µ—Å–∫–æ–ª—å–∫–æ:
	// SIGKILL - —ç—Ç–æ —Å–∏–≥–Ω–∞–ª, –∫–æ—Ç–æ—Ä—ã–π –≥–æ–≤–æ—Ä–∏—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é, —è –¥–∞–∂–µ —Ç–µ–±—è —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å –Ω–µ –±—É–¥—É, –∞ –ø—Ä–æ—Å—Ç–æ –≥—Ä–æ—Ö–Ω—É. –í–æ—Ç —ç—Ç–æ—Ç —Å–∏–≥–Ω–∞–ª –ø–µ—Ä–µ—Ö–≤–∞—Ç–∏—Ç—å –Ω–µ–ª—å–∑—è (—Ç.–Ω. –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã)
	// SIGTERM - —ç—Ç–æ —Å–∏–≥–Ω–∞–ª, –∫–æ–≥–¥–∞ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–∫–∞ –ø—Ä–∏—Ö–æ–¥–∏—Ç –∏ –≥–æ–≤–æ—Ä–∏—Ç —Ç–∞–º —Ç–∞–∫–∞—è —Å–∏—Ç—É–∞—Ü–∏—è - –º—ã —Ç–µ–±—è —Ö–æ—Ç–∏–º –∑–∞–∫—Ä—ã—Ç—å, –≤–æ—Ç —Ç–∞–∫–æ–π —Å–∏–≥–Ω–∞–ª –ª—É—á—à–µ –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞—Ç—å –∏ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞—Ç—å –∞–∫–∫—É—Ä–∞—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã
	signal.Notify(quit, syscall.SIGINT, syscall.SIGTERM)
	<-quit // —Ç—É—Ç –º—ã –≤–∏—Å–∏–º –Ω–∞ —á—Ç–µ–Ω–∏–∏ –∏ –º–æ–∂–µ–º –ø—Ä–æ—á–∏—Ç–∞—Ç—å —ç—Ç–∏ —Å–∏–≥–Ω–∞–ª—ã, –∫–∞–∫ —Ç–æ–ª—å–∫–æ —á—Ç–æ-—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–¥–∞ –∏–¥—ë—Ç –¥–∞–ª—å—à–µ

	log.Println("üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞...")

	// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å —Ç–∞–π–º–∞—É—Ç–æ–º –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞
	ctx, cancel := context.WithTimeout(context.Background(), shutdownTimeout)
	defer cancel()

	err := server.Shutdown(ctx) // —É —Å–∞–º–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ –≤—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ Shutdown –∏ –ø–µ—Ä–µ–¥–∞—ë–º —Ç—É–¥–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç, —Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, –º—ã –Ω–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –æ—Ç–º–µ–Ω—è–µ–º, —Ç.–∫. –∑–∞–∫—Ä—ã–≤–∞–µ–º—Å—è, –∞ —Å—Ç–∞—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≤–µ—Ä—à–∏—Ç—å, –Ω–æ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —Ç–∞–π–º–∞—É—Ç–∞
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Å–µ—Ä–≤–µ—Ä–∞: %v\n", err)
	}

	log.Println("‚úÖ –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
}

// getWeatherHandler –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–≥–æ–¥–µ –¥–ª—è –≥–æ—Ä–æ–¥–∞
func getWeatherHandler(storage *models.WeatherStorage) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		city := chi.URLParam(r, urlParamCity)
		if city == "" {
			http.Error(w, "City parameter is required", http.StatusBadRequest)
			return
		}

		weather := storage.GetWeather(city)
		if weather == nil {
			http.Error(w, fmt.Sprintf("Weather for city '%s' not found", city), http.StatusNotFound)
			return
		}

		// render - —ç—Ç–æ –ø–∞–∫–µ—Ç –≤ chi, –∫–æ—Ç–æ—Ä—ã–π —Å–µ—Ä–∏–∞–ª–∏–∑—É–µ—Ç –¥–∞–Ω–Ω—ã–µ
		render.JSON(w, r, weather)
	}
}

// updateWeatherHandler –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–≥–æ–¥–µ –¥–ª—è –≥–æ—Ä–æ–¥–∞
func updateWeatherHandler(storage *models.WeatherStorage) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		city := chi.URLParam(r, urlParamCity)
		if city == "" {
			http.Error(w, "City parameter is required", http.StatusBadRequest)
			return
		}

		// –î–µ–∫–æ–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
		var weatherUpdate models.Weather
		if err := json.NewDecoder(r.Body).Decode(&weatherUpdate); err != nil {
			http.Error(w, "Invalid request body", http.StatusBadRequest)
			return
		}

		// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–º—è –≥–æ—Ä–æ–¥–∞ –∏–∑ URL-–ø–∞—Ä–∞–º–µ—Ç—Ä–∞
		weatherUpdate.City = city

		// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
		weatherUpdate.UpdatedAt = time.Now()

		// –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–≥–æ–¥–µ
		storage.UpdateWeather(&weatherUpdate)

		// –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
		render.JSON(w, r, weatherUpdate)
	}
}
