package main

import (
	"context"
	"log"
	"os"
	"os/signal"
	"syscall"

	"github.com/go-telegram/bot"
	"github.com/go-telegram/bot/models"
)

func main() {
	// –¢–æ–∫–µ–Ω –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —É @BotFather –≤ Telegram
	token := "TELEGRAM_BOT_TOKEN"

	// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è graceful shutdown
	ctx, cancel := context.WithCancel(context.Background())
	defer cancel()

	// –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ —Å –æ–ø—Ü–∏—è–º–∏
	b, err := bot.New(token,
		// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
		bot.WithDefaultHandler(defaultHandler),
	)
	if err != nil {
		log.Printf("Failed to create bot: %v\n", err)
		return
	}

	// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
	b.RegisterHandler(bot.HandlerTypeMessageText, "/start", bot.MatchTypeExact, startHandler)

	// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è "ping" (—Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ)
	b.RegisterHandler(bot.HandlerTypeMessageText, "ping", bot.MatchTypeExact, pingHandler)

	// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π, —Å–æ–¥–µ—Ä–∂–∞—â–∏—Ö "hello" (—á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ)
	b.RegisterHandler(bot.HandlerTypeMessageText, "hello", bot.MatchTypeContains, helloHandler)

	log.Println("Bot started successfully! Send /start to begin")

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown
	sigChan := make(chan os.Signal, 1)
	signal.Notify(sigChan, syscall.SIGINT, syscall.SIGTERM)

	go func() {
		<-sigChan
		log.Println("Received shutdown signal, stopping bot...")
		cancel()
	}()

	// –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
	b.Start(ctx)
	log.Println("Bot stopped")
}

// startHandler –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start
func startHandler(ctx context.Context, b *bot.Bot, update *models.Update) {
	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
	_, err := b.SendMessage(ctx, &bot.SendMessageParams{
		ChatID: update.Message.Chat.ID,
		Text: `ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø –ø—Ä–æ—Å—Ç–æ–π ping-pong –±–æ—Ç!

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
‚Ä¢ –ù–∞–ø–∏—à–∏ "ping" - –ø–æ–ª—É—á–∏—à—å "pong"
‚Ä¢ –ù–∞–ø–∏—à–∏ —á—Ç–æ-—Ç–æ —Å "hello" - –ø–æ–ª—É—á–∏—à—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
‚Ä¢ –õ—é–±–æ–µ –¥—Ä—É–≥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –ø–æ–ª—É—á–∏—à—å —ç—Ö–æ

–ü–æ–ø—Ä–æ–±—É–π –Ω–∞–ø–∏—Å–∞—Ç—å "ping"!`,
	})
	if err != nil {
		log.Printf("Failed to send start message: %v\n", err)
	}
}

// pingHandler –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ "ping"
func pingHandler(ctx context.Context, b *bot.Bot, update *models.Update) {
	// –û—Ç–≤–µ—á–∞–µ–º "pong" –Ω–∞ "ping"
	_, err := b.SendMessage(ctx, &bot.SendMessageParams{
		ChatID: update.Message.Chat.ID,
		Text:   "üèì pong",
		// –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
		ReplyParameters: &models.ReplyParameters{
			MessageID: update.Message.ID,
		},
	})
	if err != nil {
		log.Printf("Failed to send pong message: %v\n", err)
	}
}

// helloHandler –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ "hello"
func helloHandler(ctx context.Context, b *bot.Bot, update *models.Update) {
	// –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	userName := update.Message.From.FirstName
	if userName == "" {
		userName = "–¥—Ä—É–≥"
	}

	_, err := b.SendMessage(ctx, &bot.SendMessageParams{
		ChatID: update.Message.Chat.ID,
		Text:   "üëã –ü—Ä–∏–≤–µ—Ç, " + userName + "! –ö–∞–∫ –¥–µ–ª–∞?",
		ReplyParameters: &models.ReplyParameters{
			MessageID: update.Message.ID,
		},
	})
	if err != nil {
		log.Printf("Failed to send hello message: %v\n", err)
	}
}

// defaultHandler –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (—ç—Ö–æ-–±–æ—Ç)
func defaultHandler(ctx context.Context, b *bot.Bot, update *models.Update) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
	if update.Message == nil || update.Message.Text == "" {
		return
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —ç—Ö–æ —Å–æ–æ–±—â–µ–Ω–∏—è
	_, err := b.SendMessage(ctx, &bot.SendMessageParams{
		ChatID: update.Message.Chat.ID,
		Text:   "üì¢ –≠—Ö–æ: " + update.Message.Text,
		ReplyParameters: &models.ReplyParameters{
			MessageID: update.Message.ID,
		},
	})
	if err != nil {
		log.Printf("Failed to send echo message: %v\n", err)
	}
}
