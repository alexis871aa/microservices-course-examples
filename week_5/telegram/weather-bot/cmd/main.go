package main

import (
	"context"
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"net/url"
	"os"
	"os/signal"
	"strings"
	"syscall"
	"time"

	"github.com/go-telegram/bot"
	"github.com/go-telegram/bot/models"
)

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è - –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω
const (
	// –ü–æ–ª—É—á–∏—Ç—å —É @BotFather –≤ Telegram
	telegramBotToken = "TELEGRAM_BOT_TOKEN"
)

// GeocodingResponse —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç Open-Meteo Geocoding API
type GeocodingResponse []struct {
	Name      string  `json:"name"`
	Country   string  `json:"country"`
	Latitude  float64 `json:"latitude"`
	Longitude float64 `json:"longitude"`
}

// WeatherResponse —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç Open-Meteo Weather API
type WeatherResponse struct {
	Current struct {
		Time                string  `json:"time"`
		Temperature2m       float64 `json:"temperature_2m"`
		ApparentTemperature float64 `json:"apparent_temperature"`
		RelativeHumidity2m  int     `json:"relative_humidity_2m"`
		WeatherCode         int     `json:"weather_code"`
		SurfacePressure     float64 `json:"surface_pressure"`
		WindSpeed10m        float64 `json:"wind_speed_10m"`
		WindDirection10m    float64 `json:"wind_direction_10m"`
	} `json:"current"`
	CurrentUnits struct {
		Temperature2m       string `json:"temperature_2m"`
		ApparentTemperature string `json:"apparent_temperature"`
		RelativeHumidity2m  string `json:"relative_humidity_2m"`
		SurfacePressure     string `json:"surface_pressure"`
		WindSpeed10m        string `json:"wind_speed_10m"`
		WindDirection10m    string `json:"wind_direction_10m"`
	} `json:"current_units"`
}

// WeatherBot —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –±–æ—Ç–∞
type WeatherBot struct {
	bot *bot.Bot
}

// –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
var popularCities = []string{
	"–ú–æ—Å–∫–≤–∞", "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫", "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥",
	"–ö–∞–∑–∞–Ω—å", "–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥", "–ß–µ–ª—è–±–∏–Ω—Å–∫", "–°–∞–º–∞—Ä–∞",
}

func main() {
	// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è graceful shutdown
	ctx, cancel := context.WithCancel(context.Background())
	defer cancel()

	// –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
	b, err := bot.New(telegramBotToken,
		bot.WithDefaultHandler(defaultHandler),
	)
	if err != nil {
		log.Printf("Failed to create bot: %v\n", err)
		return
	}

	// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä WeatherBot
	wb := &WeatherBot{
		bot: b,
	}

	// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
	b.RegisterHandler(bot.HandlerTypeMessageText, "/start", bot.MatchTypeExact, wb.startHandler)
	b.RegisterHandler(bot.HandlerTypeMessageText, "/weather", bot.MatchTypePrefix, wb.weatherHandler)
	b.RegisterHandler(bot.HandlerTypeMessageText, "/popular", bot.MatchTypeExact, wb.popularCitiesHandler)
	b.RegisterHandler(bot.HandlerTypeCallbackQueryData, "", bot.MatchTypePrefix, wb.callbackHandler)

	log.Println("üå§Ô∏è Weather Bot started successfully!")

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown
	sigChan := make(chan os.Signal, 1)
	signal.Notify(sigChan, syscall.SIGINT, syscall.SIGTERM)

	go func() {
		<-sigChan
		log.Println("Received shutdown signal, stopping bot...")
		cancel()
	}()

	// –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
	b.Start(ctx)
	log.Println("Weather Bot stopped")
}

// startHandler –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start
func (wb *WeatherBot) startHandler(ctx context.Context, b *bot.Bot, update *models.Update) {
	keyboard := &models.InlineKeyboardMarkup{
		InlineKeyboard: [][]models.InlineKeyboardButton{
			{
				{Text: "üåç –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –≥–æ—Ä–æ–¥–∞", CallbackData: "popular_cities"},
			},
		},
	}

	_, err := b.SendMessage(ctx, &bot.SendMessageParams{
		ChatID: update.Message.Chat.ID,
		Text: `üå§Ô∏è –ü—Ä–∏–≤–µ—Ç! –Ø Weather Bot!

–Ø –º–æ–≥—É –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–≥–æ–¥—É –≤ –ª—é–±–æ–º –≥–æ—Ä–æ–¥–µ –º–∏—Ä–∞.
–î–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—Ç—Å—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º API Open-Meteo.

–ö–æ–º–∞–Ω–¥—ã:
‚Ä¢ /weather <–≥–æ—Ä–æ–¥> - –ø–æ–≥–æ–¥–∞ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ
‚Ä¢ /popular - –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –≥–æ—Ä–æ–¥–∞ –†–æ—Å—Å–∏–∏

–ü—Ä–∏–º–µ—Ä—ã:
‚Ä¢ /weather –ú–æ—Å–∫–≤–∞
‚Ä¢ /weather London
‚Ä¢ /weather New York`,
		ReplyMarkup: keyboard,
	})
	if err != nil {
		log.Printf("Failed to send start message: %v\n", err)
		return
	}
}

// weatherHandler –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /weather
func (wb *WeatherBot) weatherHandler(ctx context.Context, b *bot.Bot, update *models.Update) {
	// –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏–∑ –∫–æ–º–∞–Ω–¥—ã
	parts := strings.SplitN(update.Message.Text, " ", 2)
	if len(parts) < 2 {
		_, err := b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID: update.Message.Chat.ID,
			Text:   "‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞!\n–ü—Ä–∏–º–µ—Ä: /weather –ú–æ—Å–∫–≤–∞",
		})
		if err != nil {
			log.Printf("Failed to send error message: %v\n", err)
			return
		}
		return
	}

	city := strings.TrimSpace(parts[1])
	wb.sendWeatherInfo(ctx, b, update.Message.Chat.ID, city)
}

// popularCitiesHandler –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ —Å –ø–æ–ø—É–ª—è—Ä–Ω—ã–º–∏ –≥–æ—Ä–æ–¥–∞–º–∏
func (wb *WeatherBot) popularCitiesHandler(ctx context.Context, b *bot.Bot, update *models.Update) {
	wb.sendPopularCitiesKeyboard(ctx, b, update.Message.Chat.ID)
}

// callbackHandler –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ inline –∫–Ω–æ–ø–∫–∏
func (wb *WeatherBot) callbackHandler(ctx context.Context, b *bot.Bot, update *models.Update) {
	callback := update.CallbackQuery
	data := callback.Data

	// –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query
	_, err := b.AnswerCallbackQuery(ctx, &bot.AnswerCallbackQueryParams{
		CallbackQueryID: callback.ID,
	})
	if err != nil {
		log.Printf("Failed to answer callback query: %v\n", err)
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º chat ID –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
	if callback.Message.Message == nil {
		log.Printf("Callback message is not accessible")
		return
	}
	chatID := callback.Message.Message.Chat.ID

	if data == "popular_cities" {
		wb.sendPopularCitiesKeyboard(ctx, b, chatID)
	} else if strings.HasPrefix(data, "weather_") {
		city := strings.TrimPrefix(data, "weather_")
		wb.sendWeatherInfo(ctx, b, chatID, city)
	}
}

// sendPopularCitiesKeyboard –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ–ø—É–ª—è—Ä–Ω—ã–º–∏ –≥–æ—Ä–æ–¥–∞–º–∏
func (wb *WeatherBot) sendPopularCitiesKeyboard(ctx context.Context, b *bot.Bot, chatID int64) {
	var keyboard [][]models.InlineKeyboardButton

	// –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 2 –≤ —Ä—è–¥
	for i := 0; i < len(popularCities); i += 2 {
		var row []models.InlineKeyboardButton

		row = append(row, models.InlineKeyboardButton{
			Text:         "üèôÔ∏è " + popularCities[i],
			CallbackData: "weather_" + popularCities[i],
		})

		if i+1 < len(popularCities) {
			row = append(row, models.InlineKeyboardButton{
				Text:         "üèôÔ∏è " + popularCities[i+1],
				CallbackData: "weather_" + popularCities[i+1],
			})
		}

		keyboard = append(keyboard, row)
	}

	_, err := b.SendMessage(ctx, &bot.SendMessageParams{
		ChatID: chatID,
		Text:   "üåç –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:",
		ReplyMarkup: &models.InlineKeyboardMarkup{
			InlineKeyboard: keyboard,
		},
	})
	if err != nil {
		log.Printf("Failed to send popular cities keyboard: %v\n", err)
		return
	}
}

// sendWeatherInfo –ø–æ–ª—É—á–∞–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–≥–æ–¥–µ
func (wb *WeatherBot) sendWeatherInfo(ctx context.Context, b *bot.Bot, chatID int64, city string) {
	// –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
	loadingMsg, err := b.SendMessage(ctx, &bot.SendMessageParams{
		ChatID: chatID,
		Text:   "üîÑ –ü–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ...",
	})
	if err != nil {
		log.Printf("Failed to send loading message: %v", err)
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≥–æ—Ä–æ–¥–∞
	lat, lon, cityName, country, err := wb.getCityCoordinates(city)
	if err != nil {
		// –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—à–∏–±–∫–æ–π
		_, editErr := b.EditMessageText(ctx, &bot.EditMessageTextParams{
			ChatID:    chatID,
			MessageID: loadingMsg.ID,
			Text:      fmt.Sprintf("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≥–æ—Ä–æ–¥ '%s'\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞.", city),
		})
		if editErr != nil {
			log.Printf("Failed to edit error message: %v\n", editErr)
			return
		}
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ
	weather, err := wb.getWeatherData(lat, lon)
	if err != nil {
		// –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—à–∏–±–∫–æ–π
		_, editErr := b.EditMessageText(ctx, &bot.EditMessageTextParams{
			ChatID:    chatID,
			MessageID: loadingMsg.ID,
			Text:      fmt.Sprintf("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É –¥–ª—è –≥–æ—Ä–æ–¥–∞ '%s'\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", cityName),
		})
		if editErr != nil {
			log.Printf("Failed to edit error message: %v\n", editErr)
			return
		}
		return
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–≥–æ–¥–æ–π
	weatherText := wb.formatWeatherMessage(weather, cityName, country)

	// –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏ –≤—ã–±–æ—Ä–∞ –¥—Ä—É–≥–∏—Ö –≥–æ—Ä–æ–¥–æ–≤
	keyboard := &models.InlineKeyboardMarkup{
		InlineKeyboard: [][]models.InlineKeyboardButton{
			{
				{Text: "üîÑ –û–±–Ω–æ–≤–∏—Ç—å", CallbackData: "weather_" + city},
				{Text: "üåç –î—Ä—É–≥–∏–µ –≥–æ—Ä–æ–¥–∞", CallbackData: "popular_cities"},
			},
		},
	}

	// –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
	_, err = b.EditMessageText(ctx, &bot.EditMessageTextParams{
		ChatID:      chatID,
		MessageID:   loadingMsg.ID,
		Text:        weatherText,
		ReplyMarkup: keyboard,
	})
	if err != nil {
		log.Printf("Failed to edit weather message: %v\n", err)
		return
	}
}

// getCityCoordinates –ø–æ–ª—É—á–∞–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≥–æ—Ä–æ–¥–∞ —á–µ—Ä–µ–∑ Open-Meteo Geocoding API
func (wb *WeatherBot) getCityCoordinates(city string) (float64, float64, string, string, error) {
	// –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ Geocoding API
	baseURL := "https://geocoding-api.open-meteo.com/v1/search"
	params := url.Values{}
	params.Add("name", city)
	params.Add("count", "1")
	params.Add("language", "ru")
	params.Add("format", "json")

	fullURL := baseURL + "?" + params.Encode()

	// –î–µ–ª–∞–µ–º HTTP –∑–∞–ø—Ä–æ—Å
	resp, err := http.Get(fullURL)
	if err != nil {
		return 0, 0, "", "", fmt.Errorf("failed to make geocoding request: %w", err)
	}
	defer func() {
		if cerr := resp.Body.Close(); cerr != nil {
			log.Printf("Failed to close response body: %v\n", cerr)
		}
	}()

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
	if resp.StatusCode != http.StatusOK {
		return 0, 0, "", "", fmt.Errorf("geocoding API returned status %d", resp.StatusCode)
	}

	// –î–µ–∫–æ–¥–∏—Ä—É–µ–º JSON –æ—Ç–≤–µ—Ç
	var geocoding struct {
		Results GeocodingResponse `json:"results"`
	}
	if err := json.NewDecoder(resp.Body).Decode(&geocoding); err != nil {
		return 0, 0, "", "", fmt.Errorf("failed to decode geocoding response: %w", err)
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞–π–¥–µ–Ω —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç
	if len(geocoding.Results) == 0 {
		return 0, 0, "", "", fmt.Errorf("city not found")
	}

	result := geocoding.Results[0]
	log.Printf("Found coordinates for %s, %s: %.4f, %.4f\n", result.Name, result.Country, result.Latitude, result.Longitude)

	return result.Latitude, result.Longitude, result.Name, result.Country, nil
}

// getWeatherData –ø–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –æ—Ç Open-Meteo Weather API
func (wb *WeatherBot) getWeatherData(lat, lon float64) (*WeatherResponse, error) {
	// –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ Weather API
	baseURL := "https://api.open-meteo.com/v1/forecast"
	params := url.Values{}
	params.Add("latitude", fmt.Sprintf("%.4f", lat))
	params.Add("longitude", fmt.Sprintf("%.4f", lon))
	params.Add("current", "temperature_2m,apparent_temperature,relative_humidity_2m,weather_code,surface_pressure,wind_speed_10m,wind_direction_10m")
	params.Add("timezone", "auto")

	fullURL := baseURL + "?" + params.Encode()

	// –î–µ–ª–∞–µ–º HTTP –∑–∞–ø—Ä–æ—Å
	resp, err := http.Get(fullURL)
	if err != nil {
		return nil, fmt.Errorf("failed to make weather request: %w", err)
	}
	defer resp.Body.Close()

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("weather API returned status %d", resp.StatusCode)
	}

	// –î–µ–∫–æ–¥–∏—Ä—É–µ–º JSON –æ—Ç–≤–µ—Ç
	var weather WeatherResponse
	if err := json.NewDecoder(resp.Body).Decode(&weather); err != nil {
		return nil, fmt.Errorf("failed to decode weather response: %w", err)
	}

	log.Printf("Weather data retrieved from Open-Meteo API\n")
	return &weather, nil
}

// getWeatherDescription –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–≥–æ–¥—ã –ø–æ WMO –∫–æ–¥—É
func getWeatherDescription(code int) (string, string) {
	switch code {
	case 0:
		return "‚òÄÔ∏è", "–Ø—Å–Ω–æ"
	case 1:
		return "üå§Ô∏è", "–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ —è—Å–Ω–æ"
	case 2:
		return "‚õÖ", "–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å"
	case 3:
		return "‚òÅÔ∏è", "–ü–∞—Å–º—É—Ä–Ω–æ"
	case 45, 48:
		return "üå´Ô∏è", "–¢—É–º–∞–Ω"
	case 51, 53, 55:
		return "üå¶Ô∏è", "–ú–æ—Ä–æ—Å—å"
	case 56, 57:
		return "üå®Ô∏è", "–õ–µ–¥—è–Ω–∞—è –º–æ—Ä–æ—Å—å"
	case 61, 63, 65:
		return "üåßÔ∏è", "–î–æ–∂–¥—å"
	case 66, 67:
		return "üå®Ô∏è", "–õ–µ–¥—è–Ω–æ–π –¥–æ–∂–¥—å"
	case 71, 73, 75:
		return "‚ùÑÔ∏è", "–°–Ω–µ–≥"
	case 77:
		return "‚ùÑÔ∏è", "–°–Ω–µ–∂–Ω—ã–µ –∑–µ—Ä–Ω–∞"
	case 80, 81, 82:
		return "üå¶Ô∏è", "–õ–∏–≤–µ–Ω—å"
	case 85, 86:
		return "üå®Ô∏è", "–°–Ω–µ–≥–æ–ø–∞–¥"
	case 95:
		return "‚õàÔ∏è", "–ì—Ä–æ–∑–∞"
	case 96, 99:
		return "‚õàÔ∏è", "–ì—Ä–æ–∑–∞ —Å –≥—Ä–∞–¥–æ–º"
	default:
		return "üå§Ô∏è", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
	}
}

// formatWeatherMessage —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –≤ –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
func (wb *WeatherBot) formatWeatherMessage(weather *WeatherResponse, cityName, country string) string {
	// –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–≥–æ–¥—ã –ø–æ –∫–æ–¥—É
	weatherEmoji, weatherDesc := getWeatherDescription(weather.Current.WeatherCode)

	// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ç—Ä–∞
	windDirection := getWindDirection(weather.Current.WindDirection10m)

	return fmt.Sprintf(`%s –ü–æ–≥–æ–¥–∞ –≤ %s, %s

üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: %.1f¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ %.1f¬∞C)
üìù –û–ø–∏—Å–∞–Ω–∏–µ: %s
üí® –í–µ—Ç–µ—Ä: %.1f –º/—Å (%s)
üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: %d%%
üìä –î–∞–≤–ª–µ–Ω–∏–µ: %.0f –≥–ü–∞

üïê –û–±–Ω–æ–≤–ª–µ–Ω–æ: %s
üì° –î–∞–Ω–Ω—ã–µ: Open-Meteo.com`,
		weatherEmoji,
		cityName,
		country,
		weather.Current.Temperature2m,
		weather.Current.ApparentTemperature,
		weatherDesc,
		weather.Current.WindSpeed10m,
		windDirection,
		weather.Current.RelativeHumidity2m,
		weather.Current.SurfacePressure,
		time.Now().Format("15:04"),
	)
}

// getWindDirection –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ç—Ä–∞ –ø–æ –≥—Ä–∞–¥—É—Å–∞–º
func getWindDirection(degrees float64) string {
	directions := []string{"–°", "–°–°–í", "–°–í", "–í–°–í", "–í", "–í–Æ–í", "–Æ–í", "–Æ–Æ–í", "–Æ", "–Æ–Æ–ó", "–Æ–ó", "–ó–Æ–ó", "–ó", "–ó–°–ó", "–°–ó", "–°–°–ó"}
	index := int((degrees+11.25)/22.5) % 16
	return directions[index]
}

// defaultHandler –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
func defaultHandler(ctx context.Context, b *bot.Bot, update *models.Update) {
	if update.Message == nil || update.Message.Text == "" {
		return
	}

	_, err := b.SendMessage(ctx, &bot.SendMessageParams{
		ChatID: update.Message.Chat.ID,
		Text: `‚ùì –ù–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:
‚Ä¢ /weather <–≥–æ—Ä–æ–¥> - —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É
‚Ä¢ /popular - –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –≥–æ—Ä–æ–¥–∞
‚Ä¢ /start - –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å`,
	})
	if err != nil {
		log.Printf("Failed to send default message: %v\n", err)
		return
	}
}
